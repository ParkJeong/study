printf함수도 반환을 한다.

printf함수는 모니터에 출력한 문자열의 길이를 반환한다.


return문
1. 함수를 종료시킨다.
2. 값을 반환한다.


함수를 호출하기전에 함수가 먼저 선언되거나 정의되어 있어야한다.

int Increment(int n);

int main(void){
	Increment(1);
}

int Increment(int n){
	n++;
	return n;
}



지역변수
중괄호 내에 선언되는 모든 변수
선언된 지역 내에서만 유효하다.
지역변수는 해당지역을 벗어나면 자동으로 소멸된다.


지역변수는 스택이라는 메모리 영역에 할당된다.
매개변수도 일종의 지역변수이다.


전역변수
중괄호 밖에 선언된다.
프로그램의 시작과 동시에 메모리 공간에 할당되어 종료 시까지 존재한다.
별도의 값으로 초기화하지 않으면 0으로 초기화된다.
프로그램 전체 영역 어디서든 접근이 가능하다.
전역변수의 선언은 프로그램을 복잡하게 만든다 따라서 최대한 줄이는 것이 좋다.



지역변수에 static선언을 붙인 경우
선언된 함수 내에서만 접근이 가능하다.
전역변수와 동일한 시기에 할당되고 소멸된다.
즉 프로그램의 시작과 동시에 메모리 공간에 할당되어 종료 시까지 존재한다.

static 지역변수는 전역변수보다 안정적이다. 좋다. 즉 전역변수를 static 변수로 대체할 수 있다면 대체해서 프로그램의 안정성을 높여야 한다.


register 변수
CPU내에 존재하는 레지스터라는 메모리 공간에 저장될 확률이 높아진다. 레지스터는 CPU내에 존재하는 크기가 매우 작은 메모리이다. CPU내에 존재하기 때문에 이 메모리에 저장된 데이터를 대상으로 하는 연산은 매우 빠르다.  이러한 레지스터의 활용과 관련해서 컴파일러에게 힌트를 주는 선언이 register선언이다.
컴파일러는 이 선언을 힌트로 하여 레지스터의 활용여부를 결정한다. 최종결정은 컴파일러가 내린다. 힌트가 있더라도 레지스터를 활용할 필요가 없다면 레지스터를 활용하지 않고 힌트가 없더라도 레지스터를 활용해야 한다면 레지스터를 활용한다.

int SoSimple(void){
	register int num = 3;
	...
}


재귀함수






