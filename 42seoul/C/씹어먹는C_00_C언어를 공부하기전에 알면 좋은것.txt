컴퓨터의 모든 연산은 중앙 처리 장치, CPU라 불리는 반도체에 의해서 처리된다.

CPU가 명령어를 실행하기 위해서
1. 실행할 명령어를 읽어야 한다. 
2. 연산된 결과를 어딘가에 저장해야 한다.


CPU가 연산을 수행하기 위해서 데이터를 저장하는 공간을 레지스터라고 부른다. 레지스터는 CPU안에 있는 메모리이기 때문에 CPU안에서연산을 수행 시에 매우 빠르게 접근할 수 있다. 기술의 한계상 레지스터의 개수를 늘리는 것은 어렵기에 CPU 밖에 있는 저장공간이 필요하다.

CPU옆에 딱 붙어서 저장 공간 역할을 하는 장치를 램이라고 부른다. 레지스터에 비해서 엄청 큰 용량을 제공. 요새는 보통 8GB이다.

CPU는 램에 실행할 명령어들을 저장해놓고 있다가, 연산을 수행할 때 램에서 읽어들이게 된다.필요한 데이터는 램에서 꺼내 쓰거나 저장해놓는다. 램은 휘발성이라는 단점이 있다. 휘발성 메모리란 전기가 있을 경우만 유지되는 메모리를 말한다. 전원이 공급되지 않는다면 메모리에 저장되어 있는 데이터는 모두 날라가게된다.

컴퓨터가 꺼져도 데이터를 유지할 수 있는 저장장치가 필요하다. 하드 디스크와 SSD가 전기 공급이 없이도 데이터를 안정적으로 보관할 수 있다. 램과 비교했을 떄 데이터를 읽어들이는 작업은 훨씬 느리다.

램에 있는 데이터를 가져오는데 100나노초, SSD는 약 50~150마이크로초, 하드디스크는 1~10밀리초이다. 1000 나노초 = 1 마이크로초, 1000마이크로초 = 1밀리초

CPU는 평균 0.3나노초마다 1번 연산을 수행한다. CPU가 매번 하드 디스크에서 필요한 명령어를 읽어들인다면 엄청난 시간을 낭비하게 된다.
따라서 보통 컴퓨터 프로그램을 실행한다면
1. 하드디스크에 저장되어 있는 프로그램의 위치를 찾아서 램에 복사해 놓는다.
2. CPU는 램에서 명령어를 읽어들여서 실행을 한다.

CPU에서는 빠르게 데이터를 레지스터에 불러올 수 있는 저장 공간으로 캐시라는 것을 사용한다. 램도 느리기 때문이다. 캐시는 계층별로 L1, L2, L3캐시로 이루어져 있다. L1 캐시의 경우 크기가 제일 작지만(보통 256KB) 레지스터와 가장 인접한 캐시로 L1 캐시에 저장되어 있는 데이터를 읽는 데는 1나노초면 된다.

L3 캐시의 경우 대충 28나노초 정도 걸리지만 캐시중에 크기가 제일 크다.(~16MB) 


CPU는 자기가 조만간 사용할 것 같은 데이터들을 미리 캐시에 불러온다. CPU가 미래에 실행할 명령어를 미리 볼 수 있는 것이 아니기 때문에 램에서 어떠한 데이터가 필요로 할지는 알 수 없다. 따라서 CPU는 여러가지 예측 알고리즘을 사용해서 캐시의 적중률을 높인다.

CPU가 요청한 데이터가 캐시에 없을 수도 있따. 이를 캐시미스라고 하며, 이 경우 램에서 필요한 데이터를 불러오느라 시간이 지체된다. 빠르게 동작하는 프로그램을 설계하기 위해서는 캐시미스 확률을 낮게 하는 것이 중요하다.


CPU가 램에서 데이터를 읽어들이기 위해서는 램의 어디에서 데이터를 읽어들일지 말해줘야 한다. 해당 주소값으로부터 얼마만큼 읽어야 할지도 말해줘야 한다.


CPU에 명령어를 제공하는 것을 쉬운 말로 프로그램을 실행한다라고 한다. 프로그램은 실행할 명령어와 데이터들의 집합이라고 생각하면된다.


컴퓨터에서 스타크래프트를 실행한 경우
하드디스크나 SSD와 같은 저장장치에서 있는 스타크래프트 프로그램 파일을 메모리에 복사한다.

CPU에서는 메모리를 효율적으로 관리하기 위해서 특별한 메커니즘을 제공한다.
CPU가 참조하는 메모리 주소값을 가상 메모리라고 하고, 일련의 변환 과정에 의해 참조하게 될 실제 메모리의 주소값을 물리 메모리라고 한다. 이러한 변환 방식을 페이징이라고 하고, 변환이 되는 최소의 메모리 단위를 페이지라고 한다. 보통 페이지는 4KB정도이다.

어떻게 변환을 수행할지 기록한 테이블을 페이지 테이블이라고 한다. 이 페이지 테이블은 각 프로그램마다 하나씩 가지고 있다.





모든 연산은 CPU 에서 수행된다. 정확히 말하자면, CPU 의 자그마한 레지스터 상에서 수행된다. 64 비트 CPU 의 경우 레지스터의 크기는 8 바이트 이다.

CPU 는 무슨 연산을 할 지 알려주는 명령어와, 명령어를 실행하기 위해 필요로 하는 데이터를 메모리 (램) 에서 읽는다.

우리가 프로그램을 실행한다는 것은 하드 디스크에 잠들어 있는 명령어들과 데이터를 메모리에 쓰는 것이라 생각하면 된다. 그리고 운영체제가 CPU 에 처음으로 실행해야 할 명령어의 주소값을 전달함으로써 프로그램이 시작된다.

CPU 에는 캐시가 있어서 메모리 접근 횟수를 줄일 수 있다.

각 프로그램들은 마치 자신이 방대한 메모리 공간 전체를 사용하는 것 처럼 생각하며 작동한다.

CPU 에서 참조하는 주소값은 실제 물리 메모리 주소값이 아니라 가상 메모리 주소값이다.

가상 메모리 주소값은 각 프로그램의 페이지 테이블을 통해서 실제 메모리 주소값으로 변환된다.