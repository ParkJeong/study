배열의 이름도 포인터형이다.
배열의 이름은 배열의 시작 주소 값을 의미하며, 그 형태는 값의 저장이 불가능한 상수이다.

int arr[3] = {15, 25, 35};
int * ptr = &arr[0]; // int * ptr = arr;과 동일한 문장


int형 포인터를 대상으로 1을 증가시키면 4가 증가하고 double형 포인터를 대상으로 1을 증가시키면 8이 증가한다. 

TYPE형 포인터를 대상으로 n의 크기만큼 값을 증가 및 감소시, n x sizeof(TYPE)의 크기만큼 주소 값이 증가 및 감소한다.


arr[i] = *(arr + i)



두 가지 형태의 문자열 표현
char str1[] = "My String";
char * str2 = "Your String";

위의 코드의 차이점이 있다.
배열이름 str1은 계속해서 문자 M이 저장된 위치를 가리키는 상태이어야 하지만 포인터 변수 str2는 다른 위치를 가리킬 수 있다.
str1은 상수형태의 포인터이기 때문이다.

char str1[] = "My String";
위와 같이 선언되는 문자열을 가리켜 변수 형태의 문자열이라고 한다. 문자열을 변경할 수 있다. 문자열이 배열에 저장되기 때문이다. 

char * str2 = "Your String";
위와 같이 선언되는 문자열을 가리켜 상수 형태의 문자열이라고 한다. 문자열을 변경할 수 없다.















