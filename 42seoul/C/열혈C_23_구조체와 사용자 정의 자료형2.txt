구조체 변수를 선언할 때 struct 선언 없이 그저 person man이라 하고 싶다. 그렇다면 구조체를 정의한 후에 typedef 선언을 추가해야 한다.

typedef 선언
typedef 선언은 기존에 존재하는 자료형의 이름에 새 이름을 부여하는 것을 목적으로 하는 선언이다.

typedef int INT; // int의 또 다른 INT를 부여한다.

자료형의 이름 int에 INT라는 이름을 추가로 붙여준다.

따라서 위의 선언 이후로 다음의 형태로 int형 변수를 선언할 수 있따. 물론 키워드 int를 사용하는 것과는 아무런 차이가 없다.

INT num;
INT * ptr;


typedef 선언에 있어서 새로운 이름의 부여는 가장 마지막에 등장하는 단어를 중심으로 이뤄진다. 
typedef name1 name2 name3;

가장 마지막에 등장한 name3가 'name1 name2'에 부여된 새로운 이름이 되는 것이다. 
typedef 서언을 통해서, 복잡한 유형의 자료형 선언을 매우 간결히 처리할 수 있다. typedef로 정의되는 자료형의 이름은 대문자로 시작하는 것이 관례이다. 그래야 기본 자료형의 이름과 typedef로 새로이 정의된 자료형의 이름을 구분할 수 있기 때문이다. 


struct point pos;
typedef struct point Point; // struct point에 Point라는 이름 부여
Point pos; // struct point pos;와 동일하다.


모든 구조체의 이름을 대상으로 struct 선언의 생략을 위한 typedef 선언이 등장한다.

typedef struct point{
	int xpos;
	int ypos;
} Point;

위의 선언은 다음의 정의와 선언을 한데 묶은 것이다.
struct point{
	int xpos;
	int ypos;
};
typedef struct point Point;
위의 구조체를 가리켜 simple 구조체라 부르기도 한다. SoSimple 구조체라 부르기도 한다. 어떻게 부르건 상관없지만 typedef로 정의된 이름으로 해당 구조체를 가리키는 것이 일반적이다.


typedef struct person{
	char name[20];
	int age;
} Person;

typedef struct{
	char name[20];
	int age;
} Person;
typedef에 의해 정의된 이름 Person이 생기면 구조체의 이름은 사실상 별 의미를 갖지 않게 되기 때문에 생략이 가능하다. 다만 생략을 했다면 다음의 형태로는 구조체 변수를 선언할 수 없다.
struct person man; // 불가능한 선언






