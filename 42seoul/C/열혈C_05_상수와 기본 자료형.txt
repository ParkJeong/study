자료형은 데이터를 표현하는 기준이다. 자료형은 데이터를 표현하는 방법을 뜻한다.

기본 자료형
정수형
char	1바이트
short	2바이트
int	4바이트
long	4바이트
long long	8바이트
실수형
float		4바이트
double		8바이트
long double	8바이트 이상


많은 자료형이 있는 이유
1.데이터의 표현 방식이 다르므로 최소 둘 이상의 자료형이 필요하다.
정수형과 실수형

2. 메모리 공간의 적절한 사용을 위해서 다양한 크기의 자료형이 필요하다.
정수형과 실수형에서 다양한 자료형이 생김


연산자 sizeof를 이용하면 자료형의 크기를 확인할 수 있다. 메모리 공간에서 소모하는 메모리의 크기를 바이트 단위로 계산해서 반환한다. sizeof 연산자의 피연산자로 변수와 상수뿐만 아니라 자료형도 사용할 수 있다.



값의 범위만 가지고 short냐 int냐를 결정할 수 없다.
이유는 다음과 같다.
일반적으로 CPU가 처리하기에 가장 적합한 크기의 정수 자료형을 int형으로 정의한다. 따라서 int형 연산의 속도가 다른 자료형의 연산속도에 비해서 동일하거나 더 빠르다.
이렇듯 int형 연산이 CPU가 성능을 내기에 가장 좋은 연산이다 보니, int보다 작은 크기의 데이터는 int형 데이터로 바꿔서 연산이 진행된다.(형변환이 된다.)

정리하면, 연산의 대상이 되는 변수를 선언하는 경우에는 특히 연산의 횟수가 빈번한 경우에는 저장되는 값의 크기가 작더라도 short형이 아닌 int형 변수를 선언하는 것이 좋다.

데이터의 양이 많아서 연산속도보다 데이터의 크기를 줄이는 것이 더 중요한 데이터들인 경우 char형이나 short형이 유용하게 쓰인다.



실수형 데이터가 표현할 수 있는 값의 표현범위는 매우 넓다. 따라서 float냐 double이냐를 결정할 때, 값의 표현범위는 중요한 요소가 되지 않는다.

실수 자료형의 선택에 있어서 가장 중요한 요소는 정밀도이다. 여기서 정밀도란 오차가 발생하지 않는 소수점 이하의 자릿수를 뜻한다. 오차도 데이터 표현에 사용되는 바이트의 수가 커지면 줄어들기 마련이다.

float형은 6자리까지 오차가 발생하지 않는다.
double형은 15자리
long double은 18자리


정수 자료형에서 int를 보편적으로 선택하듯이 실수 자료형에서는 double형을 보편적으로 사용한다. float은 정밀도가 너무 낮고 long double은 메모리가 부담되기 때문에 double을 이용한다. double형을 데이터를 출력할 때는 %f를 사용하지만, 데이터를 입력 받을 때는 %lf를 사용한다.


정수 자료형의 이름앞에만 unsigned를 붙일 수 있다. unsigned가 붙으면 MSB도 데이터의 크기를 표현하는데 사용이 된다. 따라서 표현할 수 있는 값이 0이상의 범위로 두배가 된다.
char형은 기본이 unsigned일 수도 있고 signed일 수도 있다. 컴파일러마다 다르다.


char형은 문자의 표현을 목적으로 정의된 자료형이기 때문에 문자형으로 분류하기도 한다. 하지만 char형은 정수형이다. 실제로 char형에 저장되는 것은 정수이다. 정수가 문자와 매핑되어 문자를 나타낼 수 있는 것이다.


상수는 크게 이름이 있는 상수와 이름이 없는 상수로 나뉜다.

상수란 변경이 불가능한 데이터를 뜻한다.
int main(void){
	int num = 30 + 40;
	return 0;
}
30과 40은 상수이다.

변수와 달리 이름 없는 상수를 가리켜 리터럴상수 또는 리터럴이라고 한다.
int형으로 표현 가능한 정수형 상수는 int형으로 저장하기로 약속되어 있다.
double형으로 표현 가능한 실수형 상수는 double형으로 저장하기로 약속되어 있다.

#include <stdio.h>

int main(void)
{
  printf("%d", sizeof('A')); // 4
}
정수는 4바이트 크기의 int형으로 표현된다는 것을 알 수 있다.(int형으로 표현가능한 범위내에서)


이름을 지니는 심볼릭 상수: const 상수
표현하는 방법이 2가지가 있다. 
1가지는 const 키워드를 사용하는 방법이고, 다른 하나는 매크로를 이용하는 방법이다.
const를 사용할 때는 const선언만 추가하면 되고 선언과 동시에 초기화를 해야한다.

이름을 지니는 상수를 가리켜 심볼릭 상수라고 한다.
상수의 이름은 모두 대문자로 하고 둘 이상의 단어를 연결할 때에는 _를 이용한다.


자료형의 변환이라는 것은 데이터의 표현방식을 바꾸는 것이다.
1.자동 형 변환 (묵시적 형 변환)
2.강제 형 변환 (명시적 형 변환)


자동 형 변환
double num1 = 245; // 245.0
int num2 = 3.1415; // 3
정수를 실수로 형 변환하는 경우
실수를 정수로 형 변환 하는 경우
바이트 크기가 큰 정수를 바이트 크기가 작은 정수로 형 변환 하는 경우


일반적으로 CPU가 처리하기에 가장 적합한 크기의 정수 자료형을 int로 정의한다. 따라서 int형 연산의 속도가 다른 자료형의 연산속도에 비해서 동일하거나 더 빠르다.

정수의 승격이란 int보다 작은 크기의 정수형 데이터가 연산이 진행될 때 int형으로 자동 형 변환되는 것을 말한다.

오늘날의 컴퓨팅 환경에서 정수형 데이터의 연산속도는 정수의 크기에 상관없이 거의 동일하다. 정수형 데이터의 연산속도는 사실상 차이가 나지 않는다.

피연산자의 자료형이 일치하지 않아서 발생하는 자동 형 변환은 데이터의 손실을 최소화하는 방향으로 진행된다. 기준은 바이트의 크기가 아니라 데이터 손실의 최소화에 있다.
(char < short) < int < long < long long < float < double < long double


강제 형 변환, 명시적 형 변환
형 변환 연산자(type casting operator)를 사용하면 된다. 
(double), (int) 처럼 쓴다.

자동 형 변환이 발생하는 코드의 경우 명시적으로 써 주는 것이 좋다. 가독성을 높여주기 때문이다.