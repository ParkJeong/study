프로그래밍 언어
사람과 컴파일러가 이해할 수 있는 약속된 형태의 언어

컴파일러
프로그래밍 언어로 작성한 프로그램을 컴퓨터가 이해할 수 있도록 기계어로 번역하는 역할을 한다. 프로그래밍 언어로 작성한 프로그램을 기계어로 번역하는 것을 컴파일이라고한다.

기계어는 0과 1로 구성된 언어체계를 뜻한다.

저급언어는 인간보다 컴퓨터에 가까운 언어이다.
고급언어는 컴퓨터보다 인간에 가까운 언어이다.


C언어의 장점

1. 절차지향적 특성을 지닌다. 익숙해지는데 오랜 시간이 걸리지 않는다.
2. 이식성이 좋다. CPU의 종류에 상관없이 실행이 가능하고 운영체제의 차이에도 덜 민감하다.
3. 좋은 성능을 보인다.
언어의 특성보다 중요한 것이 만드는 방법이다. 어떻게 만드냐에 따라서 성능은 달라질 수 있따. 하지만 기본적으로 C언어는 성능에 민감한 소프트웨어의 개발에 주로 사용한다. 사용하는 메모리의 양이 상대적으로 적고, 속도를 저하시키는 요소들을 최소화한 언어이기 때문이다.

단점
1. 고급언어에 비해 더 주의해서 사용해야 한다.


프로그램의 완성과정
1. 프로그램 작성
2. 컴파일
(에러 -> 프로그램 수정 -> 컴파일)
3. 링크
(에러 -> 프로그램 수정 -> 컴파일)
4. 실행파일 생성

링크는 보통 컴파일의 과정에서 함께 진행된다.

프로그래밍 언어를 이용해서 자신이 원하는 것을 논리적으로 표현하는 것이 코딩이다. 이 과정에서 작성된 코드를 가리켜 소스코드라고 하며, 이렇게 소스코드를 작성하는 과정을 가리켜 코딩이라고 한다.


C프로그램을 이루는 파일의 종류는 크게 소스파일과 헤더파일로 나뉜다. C문법을 기준으로 컴파일하려면 파일확장자의 이름이 .c여야 한다.

소스코드를 작성하면 이제 컴파일과 링크의 과정을 거쳐 실행파일을 생성할 차례이다. 빌드는 이 컴파일과 링크를 동시에 처리한다. 컴파일 오류나 링크 오류가 발생하지 않았다면 정상적으로 빌드가 완료되고 실행파일이 생성된다. 










